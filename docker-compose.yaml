version: '3.8'

services:
  #======================================================
  # Data Storage & Streaming Services
  #======================================================

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - app-network
    healthcheck:
      test: echo ruok | nc localhost 2181 || exit 1
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app-network
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list || exit 1
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s

  # Kafka UI for easier Kafka management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8082:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - app-network

  # MongoDB for document storage
  mongodb:
    image: mongo:4.4
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: admin  # This is important for initialization
    volumes:
      - mongodb-data:/data/db
      - ./infrastructure/mongodb/init-db.js:/docker-entrypoint-initdb.d/init-db.js
    command: --auth
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo --quiet mongodb:27017/admin -u ${MONGO_ROOT_USER:-admin} -p ${MONGO_ROOT_PASSWORD:-password} --authenticationDatabase admin || exit 1
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 40s

  # MongoDB Express for MongoDB UI
  mongo-express:
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USER:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network

  # Redis for caching
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for Airflow & Snowflake alternative
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  #======================================================
  # Processing Services
  #======================================================

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.5.3
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
    volumes:
      - ./airflow_dags/dags:/opt/airflow/dags
      - ./airflow_dags/plugins:/opt/airflow/plugins
      - airflow-logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    networks:
      - app-network
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.5.3
    depends_on:
      airflow-webserver:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./airflow_dags/dags:/opt/airflow/dags
      - ./airflow_dags/plugins:/opt/airflow/plugins
      - airflow-logs:/opt/airflow/logs
    networks:
      - app-network
    command: scheduler

  # Flink JobManager
  flink-jobmanager:
    image: apache/flink:1.14.4
    ports:
      - "8083:8081" # Changed port to avoid conflict with Mongo Express
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    volumes:
      - ./flink_processing/conf:/opt/flink/conf
      - flink-checkpoints:/opt/flink/checkpoints
    networks:
      - app-network
    depends_on:
      kafka:
        condition: service_healthy

  # Flink TaskManager
  flink-taskmanager:
    image: apache/flink:1.14.4
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
      - TASK_MANAGER_NUMBER_OF_TASK_SLOTS=4
    volumes:
      - ./flink_processing/conf:/opt/flink/conf
      - flink-checkpoints:/opt/flink/checkpoints
    networks:
      - app-network

  #======================================================
  # Application Services
  #======================================================

  # API Service
  api-service:
    build:
      context: ./api_service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URI=mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/ecommerce_analytics?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - API_KEYS=${API_KEYS:-devkey1,devkey2}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./api_service:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # DBT Service (using PostgreSQL as an alternative to Snowflake for local dev)
  dbt-service:
    image: ghcr.io/dbt-labs/dbt-postgres:1.3.1
    volumes:
      - ./dbt_transforms:/usr/app
    environment:
      - DBT_PROFILES_DIR=/usr/app
    networks:
      - app-network
    depends_on:
      - postgres

  #======================================================
  # Monitoring Services
  #======================================================

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      - app-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  zookeeper-data:
  kafka-data:
  mongodb-data:
  redis-data:
  postgres-data:
  flink-checkpoints:
  grafana-data:
  prometheus-data:
  airflow-logs: